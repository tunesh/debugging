
def Create_modules(blocks):
    
    net_info=blocks[0]
    
    module_list = nn.ModuleList()
    
    index = 0
    
    prev_filters = 3
    
    output_filters = []
    
    for x in blocks:
        module=nn.Sequential()
        
        if x['type'] == 'net':
            continue
            
        if x['type'] == 'convolutional':
            
            activation = x['activation']
            filters = int(x['filters'])
            padding = int(x['pad'])
            kernel_size = int(x['size'])
            stride = int(x['stride'])
            
            try:
                batch_normalize = x['batch_normalize']
                bias = False
                
            except:
                batch_normalize=0
                bias=True
            
            if padding:
                pad = (kernel_size - 1)//2
            else:
                pad = 0
                
            conv=nn.Conv2d(prev_filters, filters, kernel_size, stride, pad, bias= bias)
            module.add_module("conv_{0}".format(index), conv)
            
            
            if batch_normalize:
                bn=nn.BatchNorm2d(filters)
                module.add_module("batch_norm_{0}".format(index), bn)
                
                
            if activation=='leaky':
                activ=nn.LeakyReLU(0.1, inplace=True)
                module.add_module("leaky_{0}".format(index), activ)
                
                
        elif x['type']=='Upsample':
            stride=int(x['stride'])
            upsample=Upsample(stride)
            upsample=nn.Upsample(scale_factor=2, mode='nearest')
            module.add_module("upsample_{0}".format(index), upsample)
            
            
        elif (x["type"] == "route"):
            
            x["layers"] = x["layers"].split(',')
            
            #Start  of a route
            start = int(x["layers"][0])
            
            #end, if there exists one.
            try:
                end = int(x["layers"][1])
            except:
                end = 0
                
            
            
            #Positive anotation
            if start > 0: 
                start = start - index
            
            if end > 0:
                end = end - index

            
            route = Emptylayer()
            module.add_module("route_{0}".format(index), route)
            
            
            
            if end < 0:
                filters = output_filters[index + start] + output_filters[index + end]
            else:
                filters= output_filters[index + start]
                
            
        elif x['type']=='shortcut':
            from_=x['from']
            shortcut=Emptylayer()
            module.add_module("shortcut_{}".format(index), shortcut)
            
            
        elif x['type']=='maxpool':
            
            stride = int(x["stride"])
            size = int(x["size"])
            
            if stride != 1:
                
                maxpool = nn.MaxPool2d(size, stride)
                
            else:
                
                maxpool = Maxpoolstride1(size)
            
            module.add_module("maxpool_{}".format(index), maxpool)
                
                
            
            
        elif x['type']=='yolo':
            mask=x['mask'].split(',')
            mask=[int(x) for x in mask]
            
            anchors=x['anchors'].split(',')
            anchors=[int(a) for a in anchors]
            anchors=[(anchors[i], anchors[i+1]) for i in range(0, len(anchors), 2)]
            anchors=[anchors[i] for i in mask]
            
            
            detection=Detectionlayer(anchors)
            module.add_module('detection_{}'.format(index), detection)
            
            
            
            
        
            
            
        module_list.append(module)
        prev_filters = filters
        output_filters.append(filters)
        index += 1
        
    
    return (net_info, module_list)
            
               
